{"version":3,"sources":["request.ts","ifttt.ts","imgur.ts","route.ts","main.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,IAAA;;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAEA,IAAA,YAAA,GAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AAEa,OAAA,CAAA,UAAA,GAAa,UACxB,KADwB,EAExB,MAFwB,EAES;AAAA,SAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;AAE3B,MAAA,MAAM,GAAG,IAAI,SAAA,CAAA,SAAJ,CAAc,KAAd,CAAT;AACN,aAAA,CAAA,CAAA,EAAO,MAAM,CAAC,QAAP,CAAgB,OAAhB,CAAwB,MAAxB,CAAP,CAAA;;GAHiC,CAAA;AAIlC,CANY;;AAQA,OAAA,CAAA,QAAA,GAAW,UAAO,KAAP,EAAsB,GAAtB,EAAiC;AAAA,SAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;AACvD,aAAA,CAAA,CAAA,EAAO,YAAA,CAAA,SAAA,CAAA,CAAM,GAAN,EAAW;AAChB,QAAA,MAAM,EAAE,KADQ;AAEhB,QAAA,OAAO,EAAE;AACP,UAAA,aAAa,EAAE,YAAU;AADlB;AAFO,OAAX,CAAP,CAAA;;GADuD,CAAA;AAOxD,CAPY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZb,IAAA,KAAA,GAAA,IAAA;;;;AAAA,IAAA,YAAA,GAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AAGA,IAAM,aAAa,GAAG,cAAtB;AACA,IAAM,kBAAkB,GAAG,yBAA3B;AAQA,IAAM,QAAQ,GAAG,iCAAjB;;AAEa,OAAA,CAAA,WAAA,GAAc,UAAO,GAAP,EAAoB,OAApB,EAAyC;AAAA,SAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;AAAA,WAAA,WAAA,CAAA,IAAA,EAAA,UAAA,EAAA,EAAA;AAClE,aAAA,CAAA,CAAA,EAAA,OAAO,CAAC,GAAD,EAAM,aAAN,EAAqB,OAArB,CAAP,CAAA;KADkE,CAAA;GAAA,CAAA;AAC9B,CADzB;;AAGA,OAAA,CAAA,oBAAA,GAAuB,UAClC,GADkC,EAElC,OAFkC,EAEb;AAAA,SAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;AAAA,WAAA,WAAA,CAAA,IAAA,EAAA,UAAA,EAAA,EAAA;AAClB,aAAA,CAAA,CAAA,EAAA,OAAO,CAAC,GAAD,EAAM,kBAAN,EAA0B,OAA1B,CAAP,CAAA;KADkB,CAAA;GAAA,CAAA;AACuB,CAHjC;;AAKb,IAAM,OAAO,GAAG,UACd,GADc,EAEd,KAFc,EAGd,OAHc,EAGO;AAAA,SAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;AAEf,MAAA,GAAG,GAAM,QAAQ,GAAA,GAAR,GAAY,KAAZ,GAAiB,YAAjB,GAA8B,GAAvC;AACN,aAAA,CAAA,CAAA,EAAO,YAAA,CAAA,SAAA,CAAA,CAAM,GAAN,EAAW;AAChB,QAAA,MAAM,EAAE,MADQ;AAEhB,QAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe,OAAf,CAFU;AAGhB,QAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAHO,OAAX,CAAP,CAAA;;GAHqB,CAAA;AAUtB,CAbD;;;;;;;;;;;;ACtBA,IAAA,YAAA,GAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,WAAA,GAAA,eAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AAEA,IAAM,QAAQ,GAAG,+BAAjB;;AACa,OAAA,CAAA,WAAA,GAAc,UAAC,QAAD,EAAmB,KAAnB,EAAgC;AACzD,MAAM,IAAI,GAAG,IAAI,WAAA,CAAA,SAAA,CAAJ,EAAb;AACA,EAAA,IAAI,CAAC,MAAL,CAAY,OAAZ,EAAqB,KAArB;AAEA,SAAO,YAAA,CAAA,SAAA,CAAA,CAAM,QAAN,EAAgB;AACrB,IAAA,MAAM,EAAE,MADa;AAErB,IAAA,OAAO,EAAE;AAAE,MAAA,aAAa,EAAE,eAAa;AAA9B,KAFY;AAGrB,IAAA,IAAI,EAAE;AAHe,GAAhB,CAAP;AAKD,CATY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJb,IAAA,KAAA,GAAA,IAAA;;;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEa,OAAA,CAAA,YAAA,GAAe,UAC1B,GAD0B,EAE1B,KAF0B,EAG1B,OAH0B,EAGV;AAAA,SAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;eAEZ,KAAK,CAAC,KAAD,GAAL,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACF,iBAAA,CAAA,CAAA,EAAM,GAAG,CAAC,MAAJ,CAAW,IAAX,CAAgB,WAAhB,CAA4B;AAChC,YAAA,KAAK,EAAE,OAAO,CAAC,QADiB;AAEhC,YAAA,OAAO,EAAE,KAAK,CAAC,OAFiB;AAGhC,YAAA,IAAI,EAAE,UAH0B;AAIhC,YAAA,SAAS,EAAE,KAAK,CAAC;AAJe,WAA5B,CAAN,CAAA;;;AAAA,UAAA,EAAA,CAAA,IAAA;;AAMA,iBAAA,CAAA,CAAA,CAAA;;;eAEE,KAAK,CAAC,IAAN,CAAW,KAAX,CAAiB,UAAU,EAA3B,GAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACmB,iBAAA,CAAA,CAAA,EAAM,SAAA,CAAA,UAAA,CAAW,OAAO,CAAC,GAAR,CAAY,iBAAvB,EAA0C;AACnE,YAAA,OAAO,EAAE,KAAK,CAAC;AADoD,WAA1C,EAGxB,IAHwB,CAGnB,UAAA,CAAA,EAAC;AAAI,mBAAA,CAAC,CAAC,QAAF;AAAiC,WAHnB,EAIxB,IAJwB,CAInB,UAAA,EAAA,EAAE;AAAI,mBAAA,EAAE,CAAC,MAAH,CAAU,UAAA,CAAA,EAAC;AAAI,qBAAA,CAAC,CAAC,EAAF,KAAS,KAAK,CAAC,SAAf;AAAwB,aAAvC,CAAA;AAAwC,WAJ3B,CAAN,CAAA;;;AAAd,UAAA,UAAU,GAAI,EAAA,CAAA,IAAA,EAAA,CAIkC,CAJlC,CAAd;AAMP,iBAAA,CAAA,CAAA,EAAM,IAAI,CAAC,UAAD,CAAV,CAAA;;;AAAA,UAAA,EAAA,CAAA,IAAA;;AAEA,iBAAA,CAAA,CAAA,EAAM,GAAG,CAAC,MAAJ,CAAW,IAAX,CAAgB,WAAhB,CAA4B;AAChC,YAAA,KAAK,EAAE,OAAO,CAAC,QADiB;AAEhC,YAAA,OAAO,EAAE,KAAK,CAAC,OAFiB;AAGhC,YAAA,IAAI,EAAE,MAAK,UAAU,CAAC,IAAhB,GAAoB,2DAHM;AAIhC,YAAA,SAAS,EAAE,KAAK,CAAC;AAJe,WAA5B,CAAN,CAAA;;;AAAA,UAAA,EAAA,CAAA,IAAA;;;;;AAOA,iBAAA,CAAA,CAAA,EAAM,GAAG,CAAC,MAAJ,CAAW,IAAX,CAAgB,WAAhB,CAA4B;AAChC,YAAA,KAAK,EAAE,OAAO,CAAC,QADiB;AAEhC,YAAA,OAAO,EAAE,KAAK,CAAC,OAFiB;AAGhC,YAAA,IAAI,EAAE,2BAH0B;AAIhC,YAAA,SAAS,EAAE,KAAK,CAAC;AAJe,WAA5B,CAAN,CAAA;;;AAAA,UAAA,EAAA,CAAA,IAAA;;;;;;;;GA3Bc,CAAA;AAkCjB,CArCY;;AAuCb,IAAM,KAAK,GAAG,UAAC,KAAD,EAAuB;AACnC,SAAO,CACL,CAAC,KAAK,CAAC,SADF,EAEL,KAAK,CAAC,OAAN,KAAkB,OAAO,CAAC,GAAR,CAAY,oBAFzB,EAGL,KAAK,CAAC,IAAN,KAAe,WAHV,EAIL,IAJK,CAIA,UAAA,CAAA,EAAC;AAAI,WAAA,CAAA;AAAC,GAJN,CAAP;AAKD,CAND;;AAQA,IAAM,IAAI,GAAG,UAAO,UAAP,EAA+B;AAAA,SAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;eACtC,UAAU,CAAC,OAAX,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACI,UAAA,QAAQ,GAAG,UAAU,CAAC,KAAX,CAAiB,CAAjB,EAAoB,WAA/B;AACe,iBAAA,CAAA,CAAA,EAAM,SAAA,CAAA,QAAA,CACzB,OAAO,CAAC,GAAR,CAAY,iBADa,EAEzB,QAFyB,EAGzB,IAHyB,CAGpB,UAAA,CAAA,EAAC;AAAI,mBAAA,CAAC,CAAC,MAAF,EAAA;AAAU,WAHK,CAAN,CAAA;;;AAAf,UAAA,YAAY,GAAG,EAAA,CAAA,IAAA,EAAf;AAKe,iBAAA,CAAA,CAAA,EAAM,OAAA,CAAA,WAAA,CACzB,OAAO,CAAC,GAAR,CAAY,eADa,EAEzB,YAFyB,EAGzB,IAHyB,CAGpB,UAAA,CAAA,EAAC;AAAI,mBAAA,CAAC,CAAC,IAAF,EAAA;AAAQ,WAHO,CAAN,CAAA;;;AAAf,UAAA,YAAY,GAAG,EAAA,CAAA,IAAA,EAAf;AAKN,iBAAA,CAAA,CAAA,EAAM,OAAA,CAAA,oBAAA,CAAqB,OAAO,CAAC,GAAR,CAAY,SAAjC,EAA4C;AAChD,YAAA,MAAM,EAAE,UAAU,CAAC,IAD6B;AAEhD,YAAA,MAAM,EAAE,YAAY,CAAC,IAAb,CAAkB;AAFsB,WAA5C,CAAN,CAAA;;;AAAA,UAAA,EAAA,CAAA,IAAA;;;;;AAKA,iBAAA,CAAA,CAAA,EAAM,OAAA,CAAA,WAAA,CAAY,OAAO,CAAC,GAAR,CAAY,SAAxB,EAAmC;AACvC,YAAA,MAAM,EAAE,UAAU,CAAC;AADoB,WAAnC,CAAN,CAAA;;;AAAA,UAAA,EAAA,CAAA,IAAA;;;;;;;;GAlBwC,CAAA;AAsB3C,CAtBD;;AAwBA,IAAM,UAAU,GAAG,YAAA;AACjB,MAAM,MAAM,GAAG,CACb,IADa,EAEb,MAFa,EAGb,IAHa,EAIb,MAJa,EAKb,KALa,EAMb,OANa,EAOb,OAPa,EAQb,OARa,CAAf;AAWA,SAAO,IAAI,MAAJ,CAAW,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAX,CAAP;AACD,CAbD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5EA,IAAA,KAAA,GAAA,IAAA;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,GAAA,GAAA,YAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,GAAG,CAAC,MAAJ;AAEA,IAAM,GAAG,GAAG,IAAI,MAAA,CAAA,GAAJ,CAAQ;AAClB,EAAA,KAAK,EAAE,OAAO,CAAC,GAAR,CAAY,eADD;AAElB,EAAA,aAAa,EAAE,OAAO,CAAC,GAAR,CAAY,oBAFT;AAGlB,EAAA,UAAU,EAAE;AAHM,CAAR,CAAZ;AAMA,GAAG,CAAC,KAAJ,CAAU,aAAV,EAAyB,UAAO,EAAP,EAAyB;MAAhB,KAAA,GAAA,EAAA,CAAA;MAAO,OAAA,GAAA,EAAA,CAAA;;;;;;;;AAErC,iBAAA,CAAA,CAAA,EAAM,OAAA,CAAA,YAAA,CAAa,GAAb,EAAkB,KAAlB,EAAyB,OAAzB,CAAN,CAAA;;;AAAA,UAAA,EAAA,CAAA,IAAA;;;;;;AAEA,UAAA,OAAO,CAAC,KAAR,CAAc,GAAd;AACA,iBAAA,CAAA,CAAA,EAAM,GAAG,CAAC,MAAJ,CAAW,IAAX,CAAgB,WAAhB,CAA4B;AAChC,YAAA,KAAK,EAAE,OAAO,CAAC,QADiB;AAEhC,YAAA,OAAO,EAAE,KAAK,CAAC,OAFiB;AAGhC,YAAA,IAAI,EAAE,YAH0B;AAIhC,YAAA,SAAS,EAAE,KAAK,CAAC;AAJe,WAA5B,CAAN,CAAA;;;AAAA,UAAA,EAAA,CAAA,IAAA;;;;;;;;;AAOH,CAZD;;AAcA,CAAC,YAAA;AAAA,SAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;AACC,iBAAA,CAAA,CAAA,EAAM,GAAG,CAAC,KAAJ,CAAU,OAAO,CAAC,GAAR,CAAY,IAAZ,IAAoB,IAA9B,CAAN,CAAA;;;AAAA,UAAA,EAAA,CAAA,IAAA;;AACA,UAAA,OAAO,CAAC,GAAR,CAAY,iCAAZ;;;;GAFD,CAAA;AAGA,CAHD","file":"main.js","sourceRoot":"../src","sourcesContent":["import { WebClient } from \"@slack/web-api\";\nimport { ChannelsHistoryArguments } from \"@slack/web-api\";\nimport fetch from \"node-fetch\";\n\nexport const getHistory = async (\n  token: string,\n  option?: ChannelsHistoryArguments\n) => {\n  const client = new WebClient(token);\n  return client.channels.history(option);\n};\n\nexport const getImage = async (token: string, url: string) => {\n  return fetch(url, {\n    method: \"GET\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n};\n","import fetch from \"node-fetch\";\n\ntype IFTTTEvent = \"TWITTER_POST\" | \"TWITTER_POST_WITH_IMAGE\";\nconst TWITTER_EVENT = \"TWITTER_POST\";\nconst TWITTER_POST_IMAGE = \"TWITTER_POST_WITH_IMAGE\";\n\ntype IFTTTPayload = {\n  value1: string;\n  value2?: string;\n  value3?: string;\n};\n\nconst ENDPOINT = \"https://maker.ifttt.com/trigger\";\n\nexport const postTwitter = async (key: string, payload: IFTTTPayload) =>\n  request(key, TWITTER_EVENT, payload);\n\nexport const postTwitterWithImage = async (\n  key: string,\n  payload: IFTTTPayload\n) => request(key, TWITTER_POST_IMAGE, payload);\n\nconst request = async (\n  key: string,\n  event: IFTTTEvent,\n  payload: IFTTTPayload\n) => {\n  const url = `${ENDPOINT}/${event}/with/key/${key}`;\n  return fetch(url, {\n    method: \"POST\",\n    body: JSON.stringify(payload),\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  });\n};\n","import fetch from \"node-fetch\";\nimport FormData from \"form-data\";\n\nconst ENDPOINT = \"https://api.imgur.com/3/image\";\nexport const uploadImage = (clientID: string, image: Buffer) => {\n  const data = new FormData();\n  data.append(\"image\", image);\n\n  return fetch(ENDPOINT, {\n    method: \"POST\",\n    headers: { Authorization: `Client-ID ${clientID}` },\n    body: data\n  });\n};\n","import { App, AppMentionEvent, Context, MessageEvent } from \"@slack/bolt\";\nimport { getHistory, getImage } from \"./request\";\nimport { postTwitter, postTwitterWithImage } from \"./ifttt\";\nimport { uploadImage } from \"./imgur\";\n\nexport const mentionRoute = async (\n  app: App,\n  event: AppMentionEvent,\n  context: Context\n) => {\n  if (guard(event)) {\n    await app.client.chat.postMessage({\n      token: context.botToken,\n      channel: event.channel,\n      text: \"権限がありません\",\n      thread_ts: event.thread_ts\n    });\n    return;\n  }\n  if (event.text.match(postPhrase())) {\n    const [threadRoot] = await getHistory(process.env.SLACK_OAUTH_TOKEN, {\n      channel: event.channel\n    })\n      .then(x => x.messages as Array<MessageEvent>)\n      .then(xs => xs.filter(x => x.ts === event.thread_ts));\n\n    await post(threadRoot);\n\n    await app.client.chat.postMessage({\n      token: context.botToken,\n      channel: event.channel,\n      text: `\\`${threadRoot.text}\\` とTwitterに投稿しました`,\n      thread_ts: event.thread_ts\n    });\n  } else {\n    await app.client.chat.postMessage({\n      token: context.botToken,\n      channel: event.channel,\n      text: \"メンションをつけて `投稿して` と言ってください\",\n      thread_ts: event.thread_ts\n    });\n  }\n};\n\nconst guard = (event: AppMentionEvent): boolean => {\n  return [\n    !event.thread_ts,\n    event.channel !== process.env.SLACK_ENABLE_CHANNEL,\n    event.user !== \"DA4MKJ9D0\"\n  ].some(x => x);\n};\n\nconst post = async (threadRoot: MessageEvent) => {\n  if (threadRoot.files) {\n    const imageURL = threadRoot.files[0].url_private;\n    const imageRespons = await getImage(\n      process.env.SLACK_OAUTH_TOKEN,\n      imageURL\n    ).then(x => x.buffer());\n\n    const uploadResult = await uploadImage(\n      process.env.IMGUR_CLIENT_ID,\n      imageRespons\n    ).then(x => x.json());\n\n    await postTwitterWithImage(process.env.IFTTT_KEY, {\n      value1: threadRoot.text,\n      value2: uploadResult.data.link\n    });\n  } else {\n    await postTwitter(process.env.IFTTT_KEY, {\n      value1: threadRoot.text\n    });\n  }\n};\n\nconst postPhrase = () => {\n  const phrase = [\n    \"投稿\",\n    \"とうこう\",\n    \"呟く\",\n    \"つぶやく\",\n    \"呟いて\",\n    \"つぶやいて\",\n    \"Tweet\",\n    \"tweet\"\n  ];\n\n  return new RegExp(phrase.join(\"|\"));\n};\n","import { App } from \"@slack/bolt\";\nimport * as Env from \"dotenv\";\nimport { mentionRoute } from \"./route\";\n\nEnv.config();\n\nconst app = new App({\n  token: process.env.SLACK_BOT_TOKEN,\n  signingSecret: process.env.SLACK_SIGNING_SECRET,\n  ignoreSelf: true\n});\n\napp.event(\"app_mention\", async ({ event, context }) => {\n  try {\n    await mentionRoute(app, event, context);\n  } catch (e) {\n    console.error(e);\n    await app.client.chat.postMessage({\n      token: context.botToken,\n      channel: event.channel,\n      text: \"エラーが発生しました\",\n      thread_ts: event.thread_ts\n    });\n  }\n});\n\n(async () => {\n  await app.start(process.env.PORT || 3000);\n  console.log(\"⚡ Running Slack Bot with bolts.\");\n})();\n"]}